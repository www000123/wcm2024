var tipuesearch = {"pages": [{'title': 'About', 'text': '網頁:\xa0 https://www000123.github.io/wcm2024/ \n 網誌:\xa0 \n 簡報:\xa0 \n 倉儲:  https://github.com/www000123/wcm2024 \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'cmsimde', 'text': "SMap  - SiteMap - 依照階次列出網站的所有頁面. \n EditA  - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本. \n Edit  - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式. \n Config  - Configure Site - 編輯頁面標題與管理者密碼. \n Search  - 動態頁面內容的關鍵字搜尋. \n IUpload  - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小. \n IList  - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案. \n FUpload  - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改. \n FList  - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案. \n Logout  - 登出頁面編輯模式. \n Convert  - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁. \n acp  - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲. \n SStatic  - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容. \n RStatic  - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站. \n 80  - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80. \n \n", 'tags': '', 'url': 'cmsimde.html'}, {'title': 'Replit', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n \n', 'tags': '', 'url': 'Brython.html'}, {'title': 'W6', 'text': '', 'tags': '', 'url': 'W6.html'}, {'title': '1.', 'text': 'Q1 : git 的 發展史 \n A1 :\xa0 Git 是一个分布式版本控制系统，最初由 Linus Torvalds 于2005年创建，旨在帮助管理 Linux 内核的开发。 \n \n \n 创建阶段（2005年） ：Linus Torvalds 开始开发 Git，作为 Linux 内核开发过程中替代 BitKeeper 的工具。他对于 BitKeeper 的使用受到了限制，因此决定创建一个自由开放的替代工具。 \n \n \n 首次发布（2005年） ：Git 在2005年宣布首次发布，作为自由开源软件发布。最初的版本包含了基本的版本控制功能。 \n \n \n 社区发展（2005-2008年） ：随着时间的推移，Git 吸引了越来越多的开发者和项目。社区开始贡献代码，增加新功能，并改进性能和稳定性。 \n \n \n GitHub 的出现（2008年） ：GitHub 是一个基于 Git 的代码托管平台，于2008年成立。GitHub 的出现极大地促进了 Git 的普及和采用，为开发者提供了一个共享代码、协作开发的平台。 \n \n \n 版本更新（2005至今） ：Git 持续进行版本更新和改进。每个新版本都引入了新的功能、修复了 bug，并提高了性能和安全性。 \n \n \n 大规模采用（2010年至今） ：Git 已成为许多开发团队的首选版本控制系统，不仅限于开源项目，也包括许多企业和组织。其灵活性、可靠性和强大的分支管理功能使其成为广泛采用的工具之一。 \n \n \n Git 的生态系统（2010年至今） ：随着时间的推移，围绕 Git 形成了丰富的生态系统，包括各种插件、工具和服务，用于扩展和增强 Git 的功能。 \n \n \n \n Q2 :\xa0 git 創作人的相關履歷 \n A2 :\xa0Git 的创始人是 Linux 内核的创始人之一，Linus Torvalds。他出生于1969年12月28日，是芬兰计算机科学家和软件工程师。 \n \n \n 早年经历 ：Linus Torvalds 在芬兰赫尔辛基长大，并于1996年获得了赫尔辛基大学的计算机科学学士学位。 \n \n \n Linux 内核 ：在大学期间，Torvalds开始开发 Linux 内核，这是一个基于 Unix 的操作系统内核。他于1991年发布了第一个版本的 Linux 内核，并通过互联网分享源代码，吸引了全球开发者的参与和贡献。 \n \n \n Git 的创造 ：在 Linux 内核的开发过程中，Torvalds使用 BitKeeper 这个版本控制系统来管理代码。然而，由于一些限制和争议，Torvalds决定创建一个自由开源的替代工具，于是在2005年创建了 Git。 \n \n \n Git 的发展 ：Torvalds在 Git 的开发和维护上扮演着重要的角色，尤其是在项目的早期阶段。他领导着 Git 的设计和功能开发，并参与了解决各种技术和社区问题。 \n \n \n 个人荣誉 ：由于他在开源软件领域的贡献，Torvalds获得了多个荣誉和奖项，包括 2012 年度 Millennium Technology Prize（千禧技术奖）等。 \n \n \n 社区影响力 ：除了作为 Linux 和 Git 的创始人之外，Torvalds 也是开源社区的活跃成员和倡导者。他通过他的博客和社交媒体平台分享技术见解、参与技术讨论，并对开源社区的发展和文化进行影响。 \n \n \n \n \n Q3 :\xa0一般相同專業人士如何利用\xa0 git 解決內容管理問題? \n A3 :\xa0Git 对于专业人士在内容管理方面提供了许多解决方案，尤其是对于软件开发人员、技术团队和写作人员等。以下是一般相同专业人士如何利用 Git 解决内容管理问题的几种常见方式： \n \n \n 版本控制 ：Git 提供了强大的版本控制功能，可以跟踪和管理文件的变更历史。专业人士可以使用 Git 来追踪他们的工作内容的变化，包括代码、文档、配置文件等。通过提交变更并记录提交信息，他们可以清晰地了解每个版本之间的差异，并轻松地回滚到之前的版本。 \n \n \n 团队协作 ：Git 支持多人协作开发，团队成员可以在共享的代码库中合作开发项目。他们可以通过分支功能在独立的开发分支上进行工作，并在完成后将变更合并回主分支。这种方式有助于避免冲突，提高团队的工作效率，并允许团队成员在不同的时间和地点进行协作。 \n \n \n 备份和恢复 ：Git 提供了一种可靠的备份和恢复机制，可以保护内容免受意外删除或损坏。通过定期提交变更并将其推送到远程存储库，专业人士可以确保他们的工作内容始终安全可靠。如果需要恢复到之前的状态，他们可以轻松地检出特定的提交或分支。 \n \n \n 跟踪问题和变更 ：Git 集成了问题跟踪和代码审查功能，可以帮助专业人士跟踪和管理项目中的问题和变更。通过结合使用 Git 和问题跟踪工具（如GitHub 的 Issue 或 GitLab 的问题板），团队可以更轻松地跟踪和解决 bug、功能请求和其他任务。 \n \n \n 持续集成和持续交付 ：Git 可以与持续集成和持续交付（CI/CD）工具集成，帮助专业人士自动化构建、测试和部署流程。通过将 Git 存储库与 CI/CD 管道连接起来，团队可以实现更快的交付周期，确保软件质量，并快速响应用户反馈。 \n \n \n 综上所述，Git 提供了许多功能和工具，可帮助专业人士有效地管理和协作他们的内容。无论是开发软件、编写文档，还是进行其他形式的内容管理，Git 都是一个强大而灵活的工具，可以满足各种需求。', 'tags': '', 'url': '1..html'}]};